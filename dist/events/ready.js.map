{"version":3,"file":"ready.js","sourceRoot":"","sources":["../../src/events/ready.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,4CAAoB;AACpB,gDAAwB;AACxB,iCAAkC;AAClC,0BAA8B;AAC9B,wDAAsD;AACtD,2CAA8C;AAE9C,MAAM,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;AAElC,MAAM,CAAC,OAAO,GAAG;IACf,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,MAAM;IACN,OAAO,CAAC,MAAoB;;YAChC,OAAO,CAAC,GAAG,CAAC,IAAA,YAAI,EAAC,uBAAuB,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAE5D,MAAM,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvC,IAAI,EAAE;oBACJ,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,iBAAiB;iBACzB;aACF,CAAC,CAAC;YAEH,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAErB,MAAM,YAAY,GAAG,YAAE,CAAC,gBAAgB;iBACrC,WAAW,CAAC,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;iBACpD,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CACf,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAC9D,CAAC;YAEJ,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;gBAC/B,MAAM,OAAO,GAAG,wDACd,cAAI,CAAC,OAAO,CAAC,SAAS,EAAE,cAAc,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,GAC5D,CAAC;gBACF,YAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAC1C;YAED,IAAA,kCAAgB,GAAE,CAAC;QACrB,CAAC;KAAA;CACF,CAAC","sourcesContent":["import { Client } from \"discord.js\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { cyan, red } from \"chalk\";\r\nimport { commands } from \"..\";\r\nimport { registerCommands } from \"../deploy-commands\";\r\nimport { PrismaClient } from \"@prisma/client\";\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nmodule.exports = {\r\n  name: \"ready\",\r\n  once: \"true\",\r\n  async execute(client: Client<true>) {\r\n    console.log(cyan(`Ready! Logged in as ${client.user.tag}`));\r\n\r\n    const newUser = await prisma.user.create({\r\n      data: {\r\n        name: \"Alice\",\r\n        email: \"alice@prisma.io\",\r\n      },\r\n    });\r\n\r\n    console.log(newUser);\r\n\r\n    const commandFiles = fs // if null check\r\n      .readdirSync(path.resolve(__dirname, \"../commands/\"))\r\n      .filter((file) =>\r\n        file.endsWith(process.env.NODE_ENV === \"dev\" ? \".ts\" : \".js\")\r\n      );\r\n\r\n    for (const file in commandFiles) {\r\n      const command = await import(\r\n        path.resolve(__dirname, \"../commands/\", commandFiles[file])\r\n      );\r\n      commands.set(command.data.name, command);\r\n    }\r\n\r\n    registerCommands();\r\n  },\r\n};\r\n"]}